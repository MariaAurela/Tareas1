"""Crea una matriz de filas x columnas."""
  matriz = []
  for i in range(filas):
    matriz.append([random.randint(0, 100) for i in range(columnas)])
  return matriz


def imprimir_matriz(matriz):
  """Imprime una matriz."""
  for fila in matriz:
    print(fila)


def encontrar_maximo(matriz):
  """Encuentra el número más alto de una matriz."""
  maximo = matriz[0][0]
  posicion_maximo = [0, 0]
  for i in range(len(matriz)):
    for j in range(len(matriz[0])):
      if matriz[i][j] > maximo:
        maximo = matriz[i][j]
        posicion_maximo = [i, j]
  return maximo, posicion_maximo


def encontrar_minimo(matriz):
  """Encuentra el número más bajo de una matriz."""
  minimo = matriz[0][0]
  posicion_minimo = [0, 0]
  for i in range(len(matriz)):
    for j in range(len(matriz[0])):
      if matriz[i][j] < minimo:
        minimo = matriz[i][j]
        posicion_minimo = [i, j]
  return minimo, posicion_minimo


def organizar_matriz(matriz):
  """Organiza una matriz de mayor a menor."""
  for i in range(len(matriz) - 1):
    for j in range(i + 1, len(matriz)):
      if matriz[i][0] < matriz[j][0]:
        matriz[i], matriz[j] = matriz[j], matriz[i]
  return matriz


if _name_ == "__main__":
  matriz = crear_matriz(5, 10)
  imprimir_matriz(matriz)
  maximo, posicion_maximo = encontrar_maximo(matriz)
  minimo, posicion_minimo = encontrar_minimo(matriz)
  print(f"El número más alto es {maximo}, está en la posición [{posicion_maximo[0]}, {posicion_maximo[1]}]")
  print(f"El número más bajo es {minimo}, está en la posición [{posicion_minimo[0]}, {posicion_minimo[1]}]")
  matriz = organizar_matriz(matriz)
  imprimir_matriz(matriz)


def encontrar_maximo_recursivo(lista):
  """Encuentra el número más alto de una lista de forma recursiva."""
  if len(lista) == 1:
    return lista[0]
  else:
    maximo = encontrar_maximo_recursivo(lista[1:])
    if lista[0] > maximo:
      maximo = lista[0]
    return maximo



  def encontrar_subcadena_recursiva(a, b):
  """Encuentra todas las posiciones en las que se encuentra la subcadena b dentro de la cadena a."""
  if len(b) > len(a):
    return []
  elif b == a[0:len(b)]:
    return [0]
  else:
    posiciones = encontrar_subcadena_recursiva(a[1:], b)
    if posiciones:
      posiciones.append(1)
    return posiciones
